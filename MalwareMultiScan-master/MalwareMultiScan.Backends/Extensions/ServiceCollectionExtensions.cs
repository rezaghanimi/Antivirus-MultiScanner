using System;
using System.Diagnostics.CodeAnalysis;
using MalwareMultiScan.Backends.Backends;
using MalwareMultiScan.Backends.Backends.Interfaces;
using MalwareMultiScan.Backends.Services.Implementations;
using MalwareMultiScan.Backends.Services.Interfaces;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace MalwareMultiScan.Backends.Extensions
{
    /// <summary>
    /// Extensions for IServiceCollection.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Add scanning backend.
        /// </summary>
        /// <param name="services">Service collection.</param>
        /// <param name="configuration">Configuration.</param>
        /// <exception cref="ArgumentOutOfRangeException">Unknown backend.</exception>
        public static void AddScanBackend(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddSingleton<IProcessRunner, ProcessRunner>();

            switch (configuration.GetValue<string>("BACKEND_ID"))
            {
                case "clamav":
                    services.AddSingleton<IScanBackend, ClamavScanBackend>();
                    break;
                case "drweb":
                    services.AddSingleton<IScanBackend, DrWebScanBackend>();
                    break;
                case "kes":
                    services.AddSingleton<IScanBackend, KesScanBackend>();
                    break;
                case "comodo":
                    services.AddSingleton<IScanBackend, ComodoScanBackend>();
                    break;
                case "sophos":
                    services.AddSingleton<IScanBackend, SophosScanBackend>();
                    break;
                case "mcafee":
                    services.AddSingleton<IScanBackend, McAfeeScanBackend>();
                    break;
                case "windows-defender":
                    services.AddSingleton<IScanBackend, WindowsDefenderScanBackend>();
                    break;
                default:
                    services.AddSingleton<IScanBackend, DummyScanBackend>();
                    break;
            }
        }
    }
}